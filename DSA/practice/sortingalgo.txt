Bubble Sort:
do

  swapped = false

  for i = 1 to indexOfLastUnsortedElement-1

    if leftElement > rightElement

      swap(leftElement, rightElement)

      swapped = true; ++swapCounter

while swapped

Selection Sort:
repeat (numOfElements - 1) times

  set the first unsorted element as the minimum

  for each of the unsorted elements

    if element < currentMinimum

      set element as new minimum

  swap minimum with first unsorted position

Insertion Sort:
mark first element as sorted

for each unsorted element X

  'extract' the element X

  for j = lastSortedIndex down to 0

    if current element j > X

      move sorted element to the right by 1

    break loop and insert X here

Merge Sort:
split each element into partitions of size 1

recursively merge adjacent partitions

  for i = leftPartIdx to rightPartIdx

    if leftPartHeadValue <= rightPartHeadValue

      copy leftPartHeadValue

    else: copy rightPartHeadValue; Increase InvIdx

copy elements back to original array

Quick SOrt:
for each (unsorted) partition

set first element as pivot

  storeIndex = pivotIndex+1

  for i = pivotIndex+1 to rightmostIndex

    if ((a[i] < a[pivot]) or (equal but 50% lucky))

      swap(i, storeIndex); ++storeIndex

  swap(pivot, storeIndex-1)
